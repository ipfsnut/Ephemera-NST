# Ephemera-NST Refactor and Integration Plan

## 1. Current Situation

The Ephemera-NST application is structured as follows:

### Frontend (React)
- src/
  - components/
    - EventButton.js
    - EventDisplay.js
    - ExperimentList.js
    - ExperimentScreen.js
    - ConfigScreen.js
  - redux/
    - configSlice.js
    - eventSlice.js
  - Experiments/
    - NumberSwitchingTask/
      - NumberSwitchingTask.js
      - AboutNST.js
  - services/
    - api.js
  - App.js

### Backend (Express)
- src/
  - routes/
    - eventRoutes.js
  - controllers/
    - eventController.js
  - server.js
- config.js

The application currently uses Redux for state management, with separate slices for configuration and events. The NumberSwitchingTask is implemented as a standalone component within the Experiments directory.

## 2. Goals

Our primary objectives for this refactor and integration are:

1. Implement a global state management system using Redux
   - This will provide a centralized way to manage application-wide state
   - It will facilitate easier state transitions between different parts of the application

2. Create smooth transitions between global state and NumberSwitchingTask state
   - Ensure that the NumberSwitchingTask can seamlessly integrate with the global state
   - Allow for easy expansion to include other experiments in the future

3. Ensure the application remains stable and easy to troubleshoot
   - Maintain a clear and predictable state flow throughout the application
   - Implement a structure that allows for easy debugging and maintenance

## 3. Implementation Plan

### 3.1 Create globalState.js

Create a new file `src/redux/globalState.js` to manage the application's global state.

- Define initial state structure, including:
  - appState (e.g., 'INITIALIZING', 'READY', 'EXPERIMENT_RUNNING')
  - currentView (e.g., 'HOME', 'EXPERIMENT_LIST', 'NUMBER_SWITCHING_TASK')
  - error (for global error handling)

- Implement reducers for:
  - Setting app state
  - Changing current view
  - Setting and clearing errors

- Export action creators and the reducer

### 3.2 Update Redux Store

Modify `src/redux/store.js` to incorporate the new globalState reducer.

- Import the globalState reducer
- Add the globalState reducer to the root reducer
- Ensure that existing slices (configSlice, eventSlice) are properly combined with the new globalState

### 3.3 Refactor App.js

Update App.js to use the global state for rendering and navigation.

- Import necessary actions from globalState
- Use useSelector to access relevant parts of the global state
- Implement useEffect to handle initial app state changes
- Update the rendering logic to use the global state for determining which components to render
- Dispatch appropriate actions to update the global state based on user interactions or app events

### 3.4 Update NumberSwitchingTask.js

Modify NumberSwitchingTask.js to interact with the global state.

- Import relevant actions from globalState
- Update the component to dispatch actions to the global state when transitioning between experiment states
- Modify the component to consume necessary information from the global state
- Ensure that the experiment state is properly synchronized with the global app state

### 3.5 Update API Calls

Modify API calls in relevant files (such as eventSlice.js and api.js) to interact with the global state appropriately.

- Update API call logic to dispatch actions that update the global state
- Ensure that API responses are reflected in the global state where appropriate
- Handle API errors by updating the global error state

### 3.6 Testing

Implement comprehensive testing to ensure stability.

- Create unit tests for the new globalState reducer and actions
- Update existing tests to account for the new global state structure
- Implement integration tests to verify proper interaction between global state and individual components
- Conduct thorough manual testing to ensure smooth state transitions and proper rendering based on global state
