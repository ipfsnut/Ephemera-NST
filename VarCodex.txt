VarCodex: Primary App Functions, Main Variables/Components, and Core Variables

1. State Management:
   - Redux store
   - useSelector hook
   - config state
   Core Variables:
   - state.config
   - state.experiment
   - state.events

2. Event Model (Global Application State):
   - Handles navigation and general app events
   - Defined in backend/models/Event.js
   Core Variables:
   - name
   - description

3. Experiment Model (Experiment-Specific Operations):
   - Manages data for number switching task experiments
   - Defined in backend/models/Experiment.js
   Core Variables:
   - name
   - description
   - config
   - results

4. NumberSwitchingTask Experiment State:
   - experimentState: 'INITIALIZING', 'READY', 'SHOWING_DIGIT', 'AWAITING_RESPONSE', 'TRIAL_COMPLETE', 'EXPERIMENT_COMPLETE'
   - currentTrialIndex
   - currentDigit
   - responses
   - trials
   Core Variables:
   - DIFFICULTY_LEVELS
   - KEYS
   - INTER_TRIAL_DELAY
   - numTrials
   - difficultyLevels
   - trialsPerDifficulty
   - isCustom

5. Backend Structure:
   - server.js: Main Express.js server
   - database.js: MongoDB connection
   - Routes:
     - eventRoutes.js: Routes for global event data
     - experimentRoutes.js: Routes for experiment-specific data
   - Controllers:
     - eventController.js: Logic for global event data
     - experimentController.js: Logic for experiment data

6. Frontend Components:
   - EventButton
   - EventList
   - EventDisplay
   - EventDetail
   - EventForm
   - TaskInterface
   - NumberSwitchingTask
   - TrialDisplay
   - ResultsView

7. Utility Files:
   - cameraManager.js
   - indexedDB.js
   - markovChain.js
   - zipCreator.js

8. Conceptual Flow of State:
   a. Global Application State (Events):
      - Managed by Redux store
      - Updated through eventSlice.js actions
      - Persisted in MongoDB using Event model
      - Used for navigation and app-wide information

   b. Experiment State:
      - Initialized in NumberSwitchingTask component
      - Updated through user interactions and trial progression
      - Managed locally during experiment execution
      - Persisted to MongoDB using Experiment model upon completion
      - Retrieved for analysis and export through experimentSlice.js actions

   c. Data Flow:
      User Interaction -> React Component -> Redux Action -> 
      API Call -> Backend Route -> Controller -> 
      Database Operation -> Response -> 
      Redux Store Update -> React Component Re-render

9. Current Implementation Notes:
   - API Base URL: http://localhost:5069/api
   - Experiment fetching implemented in experimentController.js
   - Redux actions for experiments defined in experimentSlice.js
   - Camera capture functionality integrated in NumberSwitchingTask component

10. Identified Areas for Improvement:
    - Ensure consistency between frontend API calls and backend routes
    - Implement robust error handling for API requests
    - Refine ID handling in experimentController.js (ObjectId vs string)
    - Verify data structure alignment between frontend and backend

This VarCodex reflects the current structure of the Ephemera-NST project, emphasizing the separation between global application state (Events) and experiment-specific operations (Experiments). It provides a comprehensive overview of the system's architecture and data flow, serving as a guide for ongoing development and maintenance.